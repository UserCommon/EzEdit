// AUTO-GENERATED by yerpc-derive

import * as T from "./types.ts"
import * as RPC from "./jsonrpc.ts"

export type F32 = number;
type RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;
type NotificationMethod = (method: string, params?: RPC.Params) => void;

interface Transport {
  request: RequestMethod,
  notification: NotificationMethod
}

export class RawClient {
  constructor(private _transport: Transport) {}


  public shout(msg: string): Promise<string> {
    return (this._transport.request('shout', [msg] as RPC.Params)) as Promise<string>;
  }


  public add(a: T.F32, b: T.F32): Promise<T.F32> {
    return (this._transport.request('add', [a, b] as RPC.Params)) as Promise<T.F32>;
  }


}


